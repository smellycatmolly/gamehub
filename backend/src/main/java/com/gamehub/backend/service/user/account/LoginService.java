package com.gamehub.backend.service.user.account;

import java.util.Map;

public interface LoginService {
    public Map<String, String> getToken(String username, String password);
}


// 接口在编程中起到了定义规范、约束和契约的作用。它定义了一组方法和常量的集合，用于描述类或对象应该具有的行为和功能。接口通过声明方法签名而不提供具体实现，只定义了方法的名称、参数列表和返回类型，而具体的实现是由实现该接口的类来完成。

// 主要作用如下：

// 定义契约：接口定义了类或对象应该遵循的契约，描述了需要提供哪些方法，以及方法的参数和返回值的类型。这样，在不同的类或模块中，可以通过实现相同的接口来保持一致的行为。
// 实现多态：通过接口可以实现多态性，即一个对象可以根据所实现的接口类型来引用不同的具体实现类。这提供了灵活性和可扩展性，允许代码在运行时根据实际情况选择不同的实现。
// 实现解耦：接口将抽象和具体实现分离，使得代码之间的耦合度降低。通过依赖于接口而不是具体的类，可以实现模块之间的解耦，简化代码的维护和修改。
// 规范代码结构：接口定义了一组方法和常量的结构，可以帮助开发人员更好地组织和管理代码。它提供了一种合理的分层和模块化的方式，提高了代码的可读性和可维护性。

//总之，接口在面向对象编程中扮演着重要的角色，它提供了一种抽象和约束的机制，使得代码更加灵活、可扩展和可维护。通过定义接口，可以实现代码的模块化、解耦和多态性，提高了代码的可重用性和可测试性。